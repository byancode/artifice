<?php

namespace App\Http\Controllers;

use App\Models\{{ pc }};
use App\Models\{{ mc }};
use App\Http\Requests\{{ pc }}HasMany{{ mc }}RequestCreate;
use App\Http\Requests\{{ pc }}HasMany{{ mc }}RequestSearch;
use App\Http\Requests\{{ pc }}HasMany{{ mc }}RequestUpdate;
use App\Http\Requests\{{ pc }}HasMany{{ mc }}RequestCreateMany;
use App\Http\Requests\{{ pc }}HasMany{{ mc }}RequestFake;
use App\Http\Requests\{{ pc }}HasMany{{ mc }}RequestFakeMany;

class {{ pc }}HasMany{{ mc }}Controller extends Controller
{
    public function create({{ pc }}HasMany{{ mc }}RequestCreate $request, {{ pc }} ${{ ps }})
    {
        ${{ mm }} = ${{ ps }}->{{ mm }}()->create($request->validated());
        return response([
            'data' => ${{ mm }},
        ]);
    }
    public function search({{ pc }}HasMany{{ mc }}RequestSearch $request, {{ pc }} ${{ ps }})
    {
        return response(${{ ps }}->{{ mm }}()->paginate(20));
    }
    public function index({{ pc }} ${{ ps }})
    {
        return response(${{ ps }}->{{ mm }}()->paginate(20));
    }
    public function show({{ pc }} ${{ ps }}, {{ mc }} ${{ ms }})
    {
        return response([
            'data' => ${{ ms }},
        ]);
    }
    public function update({{ pc }} ${{ ps }}, {{ mc }} ${{ ms }})
    {
        ${{ ms }}->update($request->validated());
        return response([
            'data' => ${{ ms }},
        ]);
    }
    public function delete({{ pc }} ${{ ps }}, {{ mc }} ${{ ms }})
    {
        ${{ ms }}->delete();
        return response([]);
    }
    public function createMany({{ pc }}HasMany{{ mc }}RequestCreateMany $request, {{ pc }} ${{ ps }})
    {
        $list = ${{ ps }}->{{ mm }}()->createMany(
            $request->items
        );
        return response([
            'data' => $list
        ]);
    }
    public function createOneFake({{ pc }}HasMany{{ mc }}RequestCreateOneFake $request, {{ pc }} ${{ ps }})
    {
        $ms = ${{ ps }}->{{ ps }}()->create(array_merge(
            $request->validated(),
            [ 'test' => true ]
        ));
        return response([
            'data' => ${{ ms }},
        ]);
    }
    public function createFakes({{ pc }}HasMany{{ mc }}RequestCreateManyFakes $request, {{ pc }} ${{ ps }}, $count)
    {
        $list = ${{ ps }}->{{ mm }}()->createMany(
            factory({{ pc }}::class, $count)->make(array_merge(
                $request->validated(),
                [ 'test' => true ]
            ))->toArray()
        );
        return response([
            'data' => $list
        ]);
    }
}